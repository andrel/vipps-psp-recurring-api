swagger: '2.0'
info:
  description: |-
    The Vipps PSP API gives the PSP ability to process Vipps payment as a part of their payment offerings. By using the PSP API, PSP’s still have full transactional control for payments initiated in their payment terminals.
 
    The Vipps PSP API allows PSP’s to initiate payments for end users to accept with the Vipps mobile app. After the customer confirms the payment, Vipps enrich payment data with encrypted credit card details and hand over payment processing to PSP
 
  version: '1.0'
  title: PSP API V2
host: 'localhost:8090'
basePath: /dwo-api-application
tags:
  - name: psp-initiate-payment-controller
    description: PSP Initiate Payment Controller
  - name: psp-payment-controller
    description: PSP Payment Controller
  - name: agreement-controller
    description: Recurring agreement functionality
  - name: charge-controller
    description: Recurring Charge functionality
paths:
  /v2/psppayments/init:
    post:
      tags:
        - psp-initiate-payment-controller
      summary: Initiate a PSP Payment
      operationId: initiatePaymentV2UsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: Authorization
          in: header
          description: Bearer 'auth token'
          required: true
          type: string
          default: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmdhbml6YXRpb25OdW1iZXIiOiBNZnu7mI
        - name: Ocp-Apim-Subscription-Key
          in: header
          description: Subscription key for the product. This can be found in User Profile page in Vipps developer portal
          required: true
          type: string
          default: c1b1a8846ec56d09db39bd3b5403bf9
        - name: MERCHANT-SERIAL-NUMBER
          in: header
          description: MERCHANT-SERIAL-NUMBER
          required: true
          type: string
          default: '12345'
        - name: PSP-ID
          in: header
          description: PSP-ID
          required: true
          type: string
          default: C948DFD1546347568874C4DDC93A2E3C
        - in: body
          name: pspInitiatePaymentRequestDTO
          description: pspInitiatePaymentRequestDTO
          required: true
          schema:
            $ref: '#/definitions/PSPInitiatePaymentRequestV2DTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/InitiatePaymentPspV2Representation'
        '400':
          description: Bad Request
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorDetails'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorDetails'
        '503':
          description: Service unavailable
        '504':
          description: Gateway Timeout
      deprecated: false
  /v2/psppayments/makePayment:
    post:
      tags:
        - psp-initiate-payment-controller
      summary: |-
        Service end-point exposed by PSP. Used to transfer credit card data from TSP to PSP to complete initialized transaction.
        Outcome of transactional processing (RESERVE|CAPTURE|REJECT) will be shown at PSP payment console but Vipps must be informed if payment is refused (credit card expired, not enough funds etc) or OK.
 
        Communication security is established by using 1-way SSL and makePaymentToken (If exists in request body)
      operationId: makePaymentSwaggerUsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: true
          type: string
          default: Bearer ynuiu
        - in: body
          name: makePaymentRequest
          description: makePaymentRequest
          required: true
          schema:
            $ref: '#/definitions/MakePaymentRequestPSPV2'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MakePaymentResponsePSPV2'
      deprecated: false
  /v2/psppayments/updateStatus:
    post:
      tags:
        - psp-payment-controller
      summary: 'Update the status of the PSP transaction. Since Vipps doesn’t process transactions, updates on payment status are required in order to deliver expected customer experience. That means that PSP has to inform Vipps about any psp payment status change through this service'
      operationId: updateStatusUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Bearer 'auth token'
          required: true
          type: string
          default: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmdhbml6YXRpb25OdW1iZXIiOiI5MTg3MTM4NjciLCJpc3Mu7mI
        - name: Ocp-Apim-Subscription-Key
          in: header
          description: Subscription key for the product. This can be found in User Profile page in Vipps developer portal
          required: true
          type: string
          default: c1b1a8846ec56d09db39bd3b5403bf9
        - name: MERCHANT-SERIAL-NUMBER
          in: header
          description: MERCHANT-SERIAL-NUMBER
          required: true
          type: string
          default: '12345'
        - name: PSP-ID
          in: header
          description: PSP-ID
          required: true
          type: string
          default: C948DFD1546347568874C4DDC93A2E3C
        - in: body
          name: pspPaymentStatusDTO
          description: pspPaymentStatusDTO
          required: true
          schema:
            $ref: '#/definitions/PSPV2PaymentStatusDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ResponseInfo'
        '400':
          description: Bad Request
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorDetails'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorDetails'
        '503':
          description: Service unavailable
        '504':
          description: Gateway Timeout
      deprecated: false
  '/v2/psppayments/{pspTransactionId}/details':
    get:
      tags:
        - psp-payment-controller
      summary: The details of PSP Payment
      operationId: getPSPPaymentDetailsUsingGET
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: Bearer 'auth token'
          required: true
          type: string
          default: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmdhbml6YXRpb25OdW1iZXIiOiI5MTg3MTM4NjciLCJpc3MiOiJ2aXBwTBNZnu7mI
        - name: Ocp-Apim-Subscription-Key
          in: header
          description: Subscription key for the product. This can be found in User Profile page in Vipps developer portal
          required: true
          type: string
          default: c1b1a8846ec56d09db39bd3b5403bf9
        - name: MERCHANT-SERIAL-NUMBER
          in: header
          description: MERCHANT-SERIAL-NUMBER
          required: true
          type: string
          default: '12345'
        - name: PSP-ID
          in: header
          description: PSP-ID
          required: true
          type: string
          default: C948DFD1546347568874C4DDC93A2E3C
        - name: pspTransactionId
          in: path
          description: pspTransactionId
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PSPPaymentDetailsRepresentation'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorDetails'
        '503':
          description: Service unavailable
        '504':
          description: Gateway Timeout
      deprecated: false
  /v2/draftAgreement:
    post:
      tags:
        - agreement-controller
      summary: Send a new customer to Vipps in order to accept Agreement
      operationId: registerUsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: Authorization
          in: header
          description: Bearer 'auth token'
          required: true
          type: string
          default: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmdhbml6YXRpb25OdW1iZXIiOiI5MTg3MTM4NjciLCJpc3MiOiJ2aXBwTBNZnu7mI
        - name: Ocp-Apim-Subscription-Key
          in: header
          description: Subscription key for the product. This can be found in User Profile page in Vipps developer portal
          required: true
          type: string
          default: c1b1a8846ec56d09db39bd3b5403bf9
        - name: Merchant-Serial-Number
          in: header
          description: The applicable merchant serial number currently being represented
          required: true
          type: string
        - name: PSP-ID
          in: header
          description: PSP-ID
          required: true
          type: string
        - in: body
          name: draftAgreement
          description: draftAgreement
          required: true
          schema:
            $ref: '#/definitions/DraftAgreement'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DraftAgreementResponse'
        '201':
          description: OK
          schema:
            $ref: '#/definitions/DraftAgreementResponse'
        '400':
          description: Bad Request
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity (invalid json)
        '500':
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '503':
          description: Service unavailable
        '504':
          description: Gateway Timeout
      deprecated: false
  '/v2/charge/{agreementId}':
    get:
      tags:
        - charge-controller
      summary: List Charges
      operationId: listUsingGET_1
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: Authorization
          in: header
          description: Bearer 'auth token'
          required: true
          type: string
        - name: Ocp-Apim-Subscription-Key
          in: header
          description: Subscription key for the product. This can be found in User Profile page in Vipps developer portal
          required: true
          type: string
          default: c1b1a8846ec56d09db39bd3b5403bf9
        - name: Merchant-Serial-Number
          in: header
          description: The applicable merchant serial number currently being represented
          required: true
          type: string
        - name: agreementId
          in: path
          description: The agreement identifier (id)
          required: true
          type: string
        - name: PSP-ID
          in: header
          description: PSP-ID
          required: true
          type: string
        - name: chargeStatus
          in: query
          description: The status of the charge
          required: false
          type: string
          allowEmptyValue: false
          enum:
            - PENDING
            - DUE
            - CHARGED
            - FAILED
            - CANCELLED
            - PARTIALLY_REFUNDED
            - REFUNDED
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/ChargeResponse'
        '400':
          description: 'Invalid request, check your parameters'
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '500':
          description: Internal server error
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '503':
          description: Service unavailable
        '504':
          description: Timeout
      deprecated: false
    post:
      tags:
        - charge-controller
      summary: |-
        Create a new charge for a given agreement and customer.
 
        An idempotency key must be provided to ensure idempotent requests.
        Key size [1..30] characters.
      operationId: createUsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: Authorization
          in: header
          description: Bearer 'auth token'
          required: true
          type: string
        - name: Ocp-Apim-Subscription-Key
          in: header
          description: Subscription key for the product. This can be found in User Profile page in Vipps developer portal
          required: true
          type: string
          default: c1b1a8846ec56d09db39bd3b5403bf9
        - name: PSP-ID
          in: header
          description: PSP-ID
          required: true
          type: string
        - name: Merchant-Serial-Number
          in: header
          description: The applicable merchant serial number currently being represented
          required: true
          type: string
        - name: Idempotent-Key
          in: header
          description: Idempotent-Key
          required: true
          type: string
        - name: agreementId
          in: path
          description: Agreement ID
          required: true
          type: string
        - in: body
          name: charge
          description: charge
          required: true
          schema:
            $ref: '#/definitions/CreateCharge'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ChargeResponse'
        '201':
          description: Created
          schema:
            $ref: '#/definitions/ChargeResponse'
        '204':
          description: No Content (operation succeeded previously)
          schema:
            $ref: '#/definitions/ChargeResponse'
        '400':
          description: 'Invalid request, check your parameters'
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '409':
          description: 'Conflict, retry in a moment. (simultaneous idempotent requests)'
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '500':
          description: Internal server error
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '503':
          description: Service unavailable
        '504':
          description: Timeout
      deprecated: false
 
definitions:
  BaseErrorResult:
    type: object
    title: BaseErrorResult
  ErrorDetails:
    type: object
    properties:
      developerMsg:
        type: string
      errorCode:
        type: string
      errorField:
        type: string
      errorKey:
        type: string
      errorMessage:
        type: string
      errorResult:
        $ref: '#/definitions/BaseErrorResult'
    title: ErrorDetails
  ErrorMessage:
    type: object
    properties:
      errorId:
        type: string
        example: 81
        description: PSP native ID of the error
      errorText:
        type: string
        example: No Such Issuer
        description: PSP native textual representation of the error
    title: ErrorMessage
  GenericResponse:
    type: object
    properties:
      responseInfo:
        $ref: '#/definitions/ResponseInfo'
      result:
        type: object
    title: GenericResponse
  InitiatePaymentPspV2Representation:
    type: object
    properties:
      pspTransactionId:
        type: string
        example: 7686f7788898767977
        description: Used as a globally unique transaction reference for the PSP systems
      merchantOrderId:
        type: string
        example: 8874C4DDC93A2E3C
        description: Uniquely identifies a payment order for a merchant
      vippsRedirectUrl:
        type: string
        example: 'https://psp.vipps.io'
        description: Vipps URL where customer can enter their mobile number
    title: InitiatePaymentPspV2Representation
  MakePaymentRequestPSPV2:
    type: object
    properties:
      pspTransactionId:
        type: string
        example: 7686f7788898767977
        description: Used as a globally unique transaction reference for the PSP systems
      merchantSerialNumber:
        type: string
        example: 8874C4DDC93A2E3C
        description: Uniquely identifies a payment order for a merchant
      cardData:
        type: string
        example: 'f0a29801b4#d4ff30e221fa2980ff30e2'
        description: Encrypted credit card details
      confirmed:
        type: string
        example: YES/TIMEOUT/CANCEL
        description: Credit Card Details Encryption Status
        enum:
          - 'YES'
          - TIMEOUT
          - CANCEL
    title: MakePaymentRequestPSPV2
  MakePaymentResponsePSPV2:
    type: object
    properties:
      errorMessage:
        $ref: '#/definitions/ErrorMessage'
      paymentInfo:
        $ref: '#/definitions/PaymentInfoPSPV2'
    title: MakePaymentResponsePSPV2
  PSPInitiatePaymentRequestV2DTO:
    type: object
    properties:
      pspTransactionId:
        type: string
        example: 7686f7788898767977
        description: Used as a globally unique transaction reference for the PSP systems
      merchantOrderId:
        type: string
        example: 8874C4DDC93A2E3C
        description: Uniquely identifies a payment order for a merchant
      makePaymentUrl:
        type: string
        example: 'https://psp.vipps.io'
        description: PSP URL used by Vipps to send the card data
      makePaymentToken:
        type: string
        example: ynuiu
        description: Authorization header for MakePayment call
    title: PSPInitiatePaymentRequestV2DTO
  PSPPaymentDetailsRepresentation:
    type: object
    properties:
      pspTransactionId:
        type: string
        example: 12345692
        description: PSP ID as defined in agreement with Netaxept TSP. PSP should have agreement with Netaxept to get the public key to encrypt the card data from NetAxept TSP via Vipps
      merchantOrderId:
        type: string
        example: 56787837
        description: Id which uniquely identifies a payment
      transactionSummary:
        $ref: '#/definitions/TransactionSummary'
      transactionLogHistory:
        type: array
        items:
          $ref: '#/definitions/PSPPaymentTransactionDetailsDVO'
    title: PSPPaymentDetailsRepresentation
  PSPPaymentTransactionDetailsDVO:
    type: object
    properties:
      amount:
        type: integer
        format: int32
        example: 100
        description: Amount should be specified in Øre. 100 Øre conversion 1.00 NOK
      paymentText:
        type: string
        example: 'Betaling ordreid:'
        description: Transaction Note sent by PSP
      timeStamp:
        type: string
        example: '2018-06-13T18:34:25-07:00'
        description: Timestamp in ISO-8601 representing when Vipps did the payment
      operation:
        type: string
        example: REFUNDED
        description: Transaction Status
      operationSuccess:
        type: boolean
        example: false
        description: Success or failure for the given operation
    title: PSPPaymentTransactionDetailsDVO
  PSPV2PaymentStatusDTO:
    type: object
    properties:
      transactions:
        type: array
        items:
          $ref: '#/definitions/PSPV2TransactionInfo'
    title: PSPV2PaymentStatusDTO
  PSPV2TransactionInfo:
    type: object
    properties:
      pspTransactionId:
        type: string
        example: 7686f7788898767977
        description: PSP ID as defined in agreement with Netaxept TSP. PSP should have agreement with Netaxept to get the public key to encrypt the card data from NetAxept TSP via Vipps
      status:
        type: string
        example: CAPTURED
        description: PSP Transaction Status to be updated in Vipps
      amount:
        type: integer
        format: int32
        example: 100
        description: Amount should be specified in Øre. 100 Øre conversion 1.00 NOK
      currency:
        type: string
        example: NOK
        description: ISO 4217 defined currency code. Currently Vipps only supports NOK
      paymentText:
        type: string
        example: 'Betaling ordreid: 893746'
    title: PSPV2TransactionInfo
  PaymentInfoPSPV2:
    type: object
    properties:
      pspTransactionId:
        type: string
        example: 7686f7788898767977
        description: Used as a globally unique transaction reference for the PSP systems
      status:
        type: string
        example: RESERVE|CAPTURE|REJECT
        description: Status of the transaction
        enum:
          - OK
          - FAIL
    title: PaymentInfoPSPV2
  ResponseInfo:
    type: object
    properties:
      responseCode:
        type: string
      responseMessage:
        type: string
    title: ResponseInfo
  TransactionSummary:
    type: object
    properties:
      capturedAmount:
        type: integer
        format: int32
        example: 0
        description: Total amount captured
      remainingAmountToCapture:
        type: integer
        format: int32
        example: 0
        description: Total remaining amount to capture
      refundedAmount:
        type: integer
        format: int32
        example: 1200
        description: Total refunded amount of the order
      remainingAmountToRefund:
        type: integer
        format: int32
        example: 0
        description: Total remaining amount to refund
    title: TransactionSummary
  Agreement:
    type: object
    required:
      - interval
      - intervalCount
      - price
      - productDescription
      - productName
      - status
    properties:
      currency:
        type: string
        example: NOK
        enum:
          - NOK
      id:
        type: string
        example: agr_5kSeqzFAMkfBbc
        description: Uniquely identifies this agreement
        readOnly: true
      interval:
        type: string
        example: week
        description: Interval for subscription
        enum:
          - day
          - week
          - month
      intervalCount:
        type: integer
        format: int32
        example: 2
        description: 'Number of intervals between charges. Example: interval=week, intervalCount=2 to be able to charge every two weeks. Charges should occur at least once a year.'
        minimum: 1
        maximum: 31
        exclusiveMinimum: false
        exclusiveMaximum: false
      price:
        type: integer
        format: int32
        example: 7900
        description: 'Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK'
      productDescription:
        type: string
        example: Fin abonnementspakke
      productName:
        type: string
        example: Pluss-abonnement
        description: Name of the product being subscribed to.
      startDate:
        type: string
        example: '2018-10-22'
        description: Date when agreement was started.
        readOnly: true
      status:
        type: string
        example: ACTIVE
        description: Status of AgreementDto.
        enum:
          - PENDING
          - ACTIVE
          - STOPPED
      stopDate:
        type: string
        example: '2019-10-22'
        description: Date when agreement was stopped.
        readOnly: true
    title: Agreement
  ChargeResponse:
    type: object
    required:
      - amount
      - amountRefunded
      - dueDate
      - id
      - status
      - pspTransactionId
    properties:
      amount:
        type: integer
        format: int32
        example: 234
        description: 'Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK'
      amountRefunded:
        type: integer
        format: int32
        example: 0
        description: |-
          The total amount which has been refunded, in case of status refund/partial refund.
          Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK
      description:
        type: string
        example: Bla bla bla
        readOnly: true
      dueDate:
        type: string
        example: '2030-12-31T00:00:00Z'
      id:
        type: string
        example: chg_WCVbcAbRCmu2zk
        description: 'Unique identifier for this charge, up to 15 characters.'
      pspTransactionId:
        type: string
        example: 7686f7788898767977
        description: 'Unique identifier sent by the PSP.'
      status:
        type: string
        example: PENDING
        enum:
          - PENDING
          - DUE
          - CHARGED
          - FAILED
          - CANCELLED
          - PARTIALLY_REFUNDED
          - REFUNDED
      transactionId:
        type: string
        example: '5001419121'
        description: Contains null until the status has reached CHARGED
        readOnly: true
      type:
        type: string
        example: RECURRING
        readOnly: true
        enum:
          - INITIAL
          - RECURRING
          - ONEOFF
    title: ChargeResponse
  CreateCharge:
    type: object
    required:
      - amount
      - description
      - hasPriceChanged
    properties:
      amount:
        type: integer
        format: int32
        example: 234
        description: 'Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK'
      currency:
        type: string
        example: NOK
        enum:
          - NOK
      description:
        type: string
        example: Månedsabonnement
        description: This field is visible to the end user in-app
      dueDate:
        type: string
        example: '2030-12-31'
        description: yyyy-MM-dd
      hasPriceChanged:
        type: boolean
        example: false
        description: 'If the amount exceeds the amount specified on the agreement, this field must be true to indicate that there is an update price for the parent subscription'
      retryDays:
        type: integer
        format: int32
        example: 5
        description: 'The service will attempt to charge the customer for N days [non inclusive], must be null or contain a value >= 0. If zero, no retries will be performed'
      pspPaymentDetails:
        $ref: '#/definitions/PSPInitiatePaymentRequestV2DTO'
    title: CreateCharge
  DraftAgreement:
    type: object
    required:
      - currency
      - interval
      - intervalCount
      - isApp
      - merchantAgreementUrl
      - merchantRedirectUrl
      - price
      - productDescription
      - productName
    properties:
      currency:
        type: string
        example: NOK
        enum:
          - NOK
      customerPhoneNumber:
        type: string
        example: '+4740000000'
        description: Customers phone number (if available). Used to simplify the following Vipps interaction
      interval:
        type: string
        example: WEEK
        description: Interval for subscription
        enum:
          - YEAR
          - MONTH
          - WEEK
          - DAY
      intervalCount:
        type: integer
        format: int32
        example: 2
        description: 'Number of intervals between charges. Example: interval=week, intervalCount=2 to be able to charge every two weeks. Charges should occur at least once a year'
        minimum: 1
        maximum: 31
        exclusiveMinimum: false
        exclusiveMaximum: false
      isApp:
        type: boolean
        example: true
        description: If merchant is redirecting user from an app.
      merchantAgreementUrl:
        type: string
        example: 'https://www.merchant.no/subscriptions/1234/'
        description: URL where Vipps can redirect the customer to view/administer their subscription.
      merchantRedirectUrl:
        type: string
        example: 'https://api.merchant.no/landing'
        description: URL where customer should be redirected after the agreement has been approved/rejected in the Vipps mobile application.
      price:
        type: integer
        format: int32
        example: 7900
        description: 'Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK'
      productDescription:
        type: string
        example: Fin abonnementspakke
      productName:
        type: string
        example: Pluss-abonnement
        description: Name of the product being subscribed to.
      pspAgreementId:
        type: string
        example: eyJhbGciOiJSU
        description: ID for PSP agreement, optional field.
      oneOffCharge:
        $ref: '#/definitions/OneOffCharge'
      initialCharge:
        $ref: '#/definitions/InitialCharge'
    title: DraftAgreement
  DraftAgreementResponse:
    type: object
    properties:
      agreementResource:
        type: string
        example: 'https://api.vipps.no/api/v1/agreement/agr_5kSeqzFAMkfBbc'
        description: 'Reference to AgreementDto which user may agree to. Initially the AgreementDto is in a pendingUserApproval state, and it enters active state once user has approved in the Vipps application.'
        readOnly: true
      redirectToVipps:
        type: string
        example: 'https://api.vipps.no/api/v1/register/U6JUjQXq8HQmmV'
        description: Customer should be redirected to Vipps using this URL.
        readOnly: true
      pspAgreementId:
        type: string
        example: eyJhbGciOiJSU
        description: ID for PSP.
    title: DraftAgreementResponse
  FieldErrorDto:
    type: object
    properties:
      code:
        type: string
      field:
        type: string
      message:
        type: string
    title: FieldErrorDto
  HealthCheckStatus:
    type: object
    properties:
      application:
        type: boolean
      cosmosDb:
        type: boolean
      paymentDb:
        type: boolean
    title: HealthCheckStatus
  InitialCharge:
    type: object
    required:
      - amount
      - currency
      - description
    properties:
      amount:
        type: integer
        format: int32
        example: 234
        description: 'Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK'
      currency:
        type: string
        example: NOK
        enum:
          - NOK
      description:
        type: string
        example: Månedsabonnement
        description: This field is visible to the end user in-app
    title: InitialCharge
    description: An initial charge for a new agreement. The charge will be executed immediately when the user approves the agreement.
  OneOffCharge:
    type: object
    required:
      - amount
      - currency
      - description
    properties:
      amount:
        type: integer
        format: int32
        example: 234
        description: 'Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK'
      currency:
        type: string
        example: NOK
        enum:
          - NOK
      description:
        type: string
        example: Månedsabonnement
        description: This field is visible to the end user in-app
    title: OneOffCharge
    description: An one-off charge with this agreement. For example a bundles sale (product + subscription).
  RefundRequestDto:
    type: object
    properties:
      amount:
        type: integer
        format: int32
        example: 100
        description: The amount to refund
      description:
        type: string
        example: 'Forgot to apply discount, refunding 50%'
        description: 'A textual description of the operation, which will be displayed in the users app.'
    title: RefundRequestDto
