swagger: '2.0'
info:
  description: |-
    The Vipps PSP API gives the PSP ability to process Vipps payment as a part of their payment offerings. By using the PSP API, PSP’s still have full transactional control for payments initiated in their payment terminals.

    The Vipps PSP API allows PSP’s to initiate payments for end users to accept with the Vipps mobile app. After the customer confirms the payment, Vipps enrich payment data with encrypted credit card details and hand over payment processing to PSP
  version: '1.0'
  title: PSP API V2
host: 'localhost:8090'
basePath: /dwo-api-application
tags:
  - name: dwo-merchant-query-controller
    description: DWO Merchant Query Controller
  - name: psp-initiate-payment-controller
    description: PSP Initiate Payment Controller
  - name: psp-payment-controller
    description: PSP Payment Controller
paths:
  /v2/psppayments/init:
    post:
      tags:
        - psp-initiate-payment-controller
      summary: Initiate a PSP Payment
      operationId: initiatePaymentV2UsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: Authorization
          in: header
          description: Bearer JWT-TOKEN
          required: true
          type: string
          default: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmdhbml6YXRpb25OdW1iZXIiOiI5MTg3MTM4NjciLCJpc3MiOiJ2aXBwcy5ubyIsImV4cCI6MTY0NDc0Mzg5NywiYWNjb3VudE51bWJlciI6IjE4MDAwMDAwMDAwIn0.mqO4RsidM_-twRfCvgNnXUUPrXaTgFVMvkJTVmJgtmbHziMVxHnG9moHpEj90_A3MRPp_jucdgMnqixgExOykJCLX6VsiUB0qMLXTgBE7Mmkz3lk0jCgv7OwYDJuLksrXvLepD68KdyDTCVwPxdgqh_H9Tea7S3gSYUnYoNkNP5h7Eyvai6U7BuJVcoE5ckO1ZjGmOvNlfHUbAZYBH8I5RV96bnmEtdtkojrkoZtT7HjueyTZODfdaOyvI5VfMLKbr9qGkYKP0UBKTp9ST5eV-W_Y062PgOsfRNXL2-ltKgn0vDkpUWYGiA8Y98ondXLF1kQIc8pAFPAwhzWG31oM_wKeOjjjK-2lMg1X1LjTk-zbq0HBilhQzbXdW0PHws0p1UZgviW-bdIwRfcjn1ysEqzS0HzDuaRTGIQDeld3MrtcwLLce7PT4rSGZeoJM-pUTidztzX48pFUixLm-aa1-SWnbRIqUufmsylSJNZXjgS06pISGUMKPiAdSjINY17x8YkeptS1B_r56oshRY8BFffCPxtMJI1BAWYQBCQ8WvUadlWNrQ477kUuvauEPRK_eyXT83cANaEa39lBPz4J3PHAE6grV4c3G_rClFzaFl1mzrhUABKJ3CpP_q7LmkboXSI5xx0BkyIb4wG_eG1s7_E_P_T0hIj3CTBNZnu7mI
        - name: MERCHANT-SERIAL-NUMBER
          in: header
          description: MERCHANT-SERIAL-NUMBER
          required: true
          type: string
          default: '12345'
        - name: Ocp-Apim-Subscription-Key
          in: header
          description: Subscription key for eCommerce product. This can be found in User Profile page on Merchant developer portal after merchant account is created
          required: true
          type: string
          default: c1b1a8846ec56d09db39bd3b5403bf9
        - name: PSP-ID
          in: header
          description: PSP-ID
          required: true
          type: string
          default: C948DFD1546347568874C4DDC93A2E3C
        - in: body
          name: pspInitiatePaymentRequestDTO
          description: pspInitiatePaymentRequestDTO
          required: true
          schema:
            $ref: '#/definitions/PSPInitiatePaymentRequestV2DTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/InitiatePaymentPspV2Representation'
        '400':
          description: Bad Request
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorDetails'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorDetails'
        '503':
          description: Service unavailable
        '504':
          description: Gateway Timeout
      deprecated: false
  /v2/psppayments/makePayment:
    post:
      tags:
        - psp-initiate-payment-controller
      summary: |-
        Service end-point exposed by PSP. Used to transfer credit card data from TSP to PSP to complete initialized transaction.
        Outcome of transactional processing (RESERVE|CAPTURE|REJECT) will be shown at PSP payment console but Vipps must be informed if payment is refused (credit card expired, not enough funds etc) or OK.

        Communication security is established by using 1-way SSL and makePaymentToken (If exists in request body)
      operationId: makePaymentSwaggerUsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: Authorization
          in: header
          description: Authorization
          required: true
          type: string
          default: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmdhbml6YXRpb25OdW1iZXIiOiI5MTg3MTM4NjciLCJpc3MiOiJ2aXBwcy5ubyIsImV4cCI6MTY0NDc0Mzg5NywiYWNjb3VudE51bWJlciI6IjE4MDAwMDAwMDAwIn0.mqO4RsidM_-twRfCvgNnXUUPrXaTgFVMvkJTVmJgtmbHziMVxHnG9moHpEj90_A3MRPp_jucdgMnqixgExOykJCLX6VsiUB0qMLXTgBE7Mmkz3lk0jCgv7OwYDJuLksrXvLepD68KdyDTCVwPxdgqh_H9Tea7S3gSYUnYoNkNP5h7Eyvai6U7BuJVcoE5ckO1ZjGmOvNlfHUbAZYBH8I5RV96bnmEtdtkojrkoZtT7HjueyTZODfdaOyvI5VfMLKbr9qGkYKP0UBKTp9ST5eV-W_Y062PgOsfRNXL2-ltKgn0vDkpUWYGiA8Y98ondXLF1kQIc8pAFPAwhzWG31oM_wKeOjjjK-2lMg1X1LjTk-zbq0HBilhQzbXdW0PHws0p1UZgviW-bdIwRfcjn1ysEqzS0HzDuaRTGIQDeld3MrtcwLLce7PT4rSGZeoJM-pUTidztzX48pFUixLm-aa1-SWnbRIqUufmsylSJNZXjgS06pISGUMKPiAdSjINY17x8YkeptS1B_r56oshRY8BFffCPxtMJI1BAWYQBCQ8WvUadlWNrQ477kUuvauEPRK_eyXT83cANaEa39lBPz4J3PHAE6grV4c3G_rClFzaFl1mzrhUABKJ3CpP_q7LmkboXSI5xx0BkyIb4wG_eG1s7_E_P_T0hIj3CTBNZnu7mI
        - name: MERCHANT-SERIAL-NUMBER
          in: header
          description: Identifies a merchant sales channel
          required: true
          type: string
          default: '12345'
        - name: Ocp-Apim-Subscription-Key
          in: header
          description: Subscription key for eCommerce product. This can be found in User Profile page on Merchant developer portal after merchant account is created
          required: true
          type: string
          default: c1b1a8846ec56d09db39bd3b5403bf9
        - name: PSP-ID
          in: header
          description: PSP ID as defined during PSP enrollment. PSP should share a public key to encrypt the card data from TSP via Vipps
          required: true
          type: string
          default: C948DFD1546347568874C4DDC93A2E3C
        - in: body
          name: makePaymentRequest
          description: makePaymentRequest
          required: true
          schema:
            $ref: '#/definitions/MakePaymentRequestPSPV2'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MakePaymentResponsePSPV2'
      deprecated: false
  /v2/psppayments/updateStatus:
    post:
      tags:
        - psp-payment-controller
      summary: 'Update the status of the PSP transaction. Since Vipps doesn’t process transactions, updates on payment status are required in order to deliver expected customer experience. That means that PSP has to inform Vipps about any psp payment status change through this service'
      operationId: updateStatusUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: Authorization
          in: header
          description: Bearer JWT-TOKEN
          required: true
          type: string
          default: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmdhbml6YXRpb25OdW1iZXIiOiI5MTg3MTM4NjciLCJpc3MiOiJ2aXBwcy5ubyIsImV4cCI6MTY0NDc0Mzg5NywiYWNjb3VudE51bWJlciI6IjE4MDAwMDAwMDAwIn0.mqO4RsidM_-twRfCvgNnXUUPrXaTgFVMvkJTVmJgtmbHziMVxHnG9moHpEj90_A3MRPp_jucdgMnqixgExOykJCLX6VsiUB0qMLXTgBE7Mmkz3lk0jCgv7OwYDJuLksrXvLepD68KdyDTCVwPxdgqh_H9Tea7S3gSYUnYoNkNP5h7Eyvai6U7BuJVcoE5ckO1ZjGmOvNlfHUbAZYBH8I5RV96bnmEtdtkojrkoZtT7HjueyTZODfdaOyvI5VfMLKbr9qGkYKP0UBKTp9ST5eV-W_Y062PgOsfRNXL2-ltKgn0vDkpUWYGiA8Y98ondXLF1kQIc8pAFPAwhzWG31oM_wKeOjjjK-2lMg1X1LjTk-zbq0HBilhQzbXdW0PHws0p1UZgviW-bdIwRfcjn1ysEqzS0HzDuaRTGIQDeld3MrtcwLLce7PT4rSGZeoJM-pUTidztzX48pFUixLm-aa1-SWnbRIqUufmsylSJNZXjgS06pISGUMKPiAdSjINY17x8YkeptS1B_r56oshRY8BFffCPxtMJI1BAWYQBCQ8WvUadlWNrQ477kUuvauEPRK_eyXT83cANaEa39lBPz4J3PHAE6grV4c3G_rClFzaFl1mzrhUABKJ3CpP_q7LmkboXSI5xx0BkyIb4wG_eG1s7_E_P_T0hIj3CTBNZnu7mI
        - name: MERCHANT-SERIAL-NUMBER
          in: header
          description: MERCHANT-SERIAL-NUMBER
          required: true
          type: string
          default: '12345'
        - name: Ocp-Apim-Subscription-Key
          in: header
          description: Subscription key for eCommerce product. This can be found in User Profile page on Merchant developer portal after merchant account is created
          required: true
          type: string
          default: c1b1a8846ec56d09db39bd3b5403bf9
        - name: PSP-ID
          in: header
          description: PSP-ID
          required: true
          type: string
          default: C948DFD1546347568874C4DDC93A2E3C
        - in: body
          name: pspPaymentStatusDTO
          description: pspPaymentStatusDTO
          required: true
          schema:
            $ref: '#/definitions/PSPV2PaymentStatusDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ResponseInfo'
        '400':
          description: Bad Request
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorDetails'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorDetails'
        '503':
          description: Service unavailable
        '504':
          description: Gateway Timeout
      deprecated: false
  '/v2/psppayments/{pspTransactionId}/details':
    get:
      tags:
        - dwo-merchant-query-controller
      summary: The details of PSP Payment
      operationId: getPSPPaymentDetailsUsingGET
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: Bearer JWT-TOKEN
          required: true
          type: string
          default: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmdhbml6YXRpb25OdW1iZXIiOiI5MTg3MTM4NjciLCJpc3MiOiJ2aXBwcy5ubyIsImV4cCI6MTY0NDc0Mzg5NywiYWNjb3VudE51bWJlciI6IjE4MDAwMDAwMDAwIn0.mqO4RsidM_-twRfCvgNnXUUPrXaTgFVMvkJTVmJgtmbHziMVxHnG9moHpEj90_A3MRPp_jucdgMnqixgExOykJCLX6VsiUB0qMLXTgBE7Mmkz3lk0jCgv7OwYDJuLksrXvLepD68KdyDTCVwPxdgqh_H9Tea7S3gSYUnYoNkNP5h7Eyvai6U7BuJVcoE5ckO1ZjGmOvNlfHUbAZYBH8I5RV96bnmEtdtkojrkoZtT7HjueyTZODfdaOyvI5VfMLKbr9qGkYKP0UBKTp9ST5eV-W_Y062PgOsfRNXL2-ltKgn0vDkpUWYGiA8Y98ondXLF1kQIc8pAFPAwhzWG31oM_wKeOjjjK-2lMg1X1LjTk-zbq0HBilhQzbXdW0PHws0p1UZgviW-bdIwRfcjn1ysEqzS0HzDuaRTGIQDeld3MrtcwLLce7PT4rSGZeoJM-pUTidztzX48pFUixLm-aa1-SWnbRIqUufmsylSJNZXjgS06pISGUMKPiAdSjINY17x8YkeptS1B_r56oshRY8BFffCPxtMJI1BAWYQBCQ8WvUadlWNrQ477kUuvauEPRK_eyXT83cANaEa39lBPz4J3PHAE6grV4c3G_rClFzaFl1mzrhUABKJ3CpP_q7LmkboXSI5xx0BkyIb4wG_eG1s7_E_P_T0hIj3CTBNZnu7mI
        - name: MERCHANT-SERIAL-NUMBER
          in: header
          description: MERCHANT-SERIAL-NUMBER
          required: true
          type: string
          default: '12345'
        - name: Ocp-Apim-Subscription-Key
          in: header
          description: Subscription key for eCommerce product. This can be found in User Profile page on Merchant developer portal after merchant account is created
          required: true
          type: string
          default: c1b1a8846ec56d09db39bd3b5403bf9
        - name: PSP-ID
          in: header
          description: PSP-ID
          required: true
          type: string
          default: C948DFD1546347568874C4DDC93A2E3C
        - name: pspTransactionId
          in: path
          description: pspTransactionId
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PSPPaymentDetailsRepresentation'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorDetails'
        '503':
          description: Service unavailable
        '504':
          description: Gateway Timeout
      deprecated: false
definitions:
  BaseErrorResult:
    type: object
    title: BaseErrorResult
  ErrorDetails:
    type: object
    properties:
      developerMsg:
        type: string
      errorCode:
        type: string
      errorField:
        type: string
      errorKey:
        type: string
      errorMessage:
        type: string
      errorResult:
        $ref: '#/definitions/BaseErrorResult'
    title: ErrorDetails
  ErrorMessage:
    type: object
    properties:
      errorId:
        type: string
        example: 81
        description: PSP native ID of the error
      errorText:
        type: string
        example: No Such Issuer
        description: PSP native textual representation of the error
    title: ErrorMessage
  GenericResponse:
    type: object
    properties:
      responseInfo:
        $ref: '#/definitions/ResponseInfo'
      result:
        type: object
    title: GenericResponse
  InitiatePaymentPspV2Representation:
    type: object
    properties:
      pspTransactionId:
        type: string
        example: 7686f7788898767977
        description: Used as a globally unique transaction reference for the PSP systems
      merchantOrderId:
        type: string
        example: 8874C4DDC93A2E3C
        description: Uniquely identifies a payment order for a merchant
      vippsRedirectUrl:
        type: string
        example: 'https://psp.vipps.io'
        description: Vipps URL where customer can enter their mobile number
    title: InitiatePaymentPspV2Representation
  MakePaymentRequestPSPV2:
    type: object
    properties:
      pspTransactionId:
        type: string
        example: 7686f7788898767977
        description: Used as a globally unique transaction reference for the PSP systems
      merchantSerialNumber:
        type: string
        example: 8874C4DDC93A2E3C
        description: Uniquely identifies a payment order for a merchant
      cardData:
        type: string
        example: 'f0a29801b4#d4ff30e221fa2980ff30e2'
        description: Encrypted credit card details
      confirmed:
        type: string
        example: YES/NO/TIMEOUT/CANCEL
        description: Credit Card Details Encryption Status
        enum:
          - 'YES'
          - 'NO'
          - TIMEOUT
          - CANCEL
    title: MakePaymentRequestPSPV2
  MakePaymentResponsePSPV2:
    type: object
    properties:
      errorMessage:
        $ref: '#/definitions/ErrorMessage'
      paymentInfo:
        $ref: '#/definitions/PaymentInfoPSPV2'
    title: MakePaymentResponsePSPV2
  PSPInitiatePaymentRequestV2DTO:
    type: object
    properties:
      merchantSerialNumber:
        type: string
      pspId:
        type: string
      pspTransactionId:
        type: string
        example: 7686f7788898767977
        description: Used as a globally unique transaction reference for the PSP systems
      merchantOrderId:
        type: string
        example: 8874C4DDC93A2E3C
        description: Uniquely identifies a payment order for a merchant
      customerMobileNumber:
        type: string
        example: 92929292
        description: Mobile number of the user who has to pay for the transaction from Vipps
      amount:
        type: integer
        format: int32
        example: 100
        description: Amount should be specified in Øre. 100 Øre conversion 1.00 NOK
      currency:
        type: string
        example: NOK
        description: ISO 4217 defined currency code. Currently Vipps only supports NOK
      pspRedirectUrl:
        type: string
        example: 'https://psp.vipps.io'
        description: Vipps will use this URL to redirect end user after payment confirmation
      makePaymentUrl:
        type: string
        example: 'https://psp.vipps.io'
        description: PSP URL used by Vipps to send the card data
      makePaymentToken:
        type: string
        example: ynuiu
        description: Authorization header for MakePayment call
      paymentText:
        type: string
        example: 'Order id :'
        description: Text to be displayed to end user
      isApp:
        type: boolean
        example: true
        description: Indicates whether payment request is triggered from Mobile App or Web browser
    title: PSPInitiatePaymentRequestV2DTO
  PSPPaymentDetailsRepresentation:
    type: object
    properties:
      pspTransactionId:
        type: string
        example: 12345692
        description: PSP ID as defined in agreement with Netaxept TSP. PSP should have agreement with Netaxept to get the public key to encrypt the card data from NetAxept TSP via Vipps
      merchantOrderId:
        type: string
        example: 56787837
        description: Id which uniquely identifies a payment
      transactionSummary:
        $ref: '#/definitions/TransactionSummary'
      transactionLogHistory:
        type: array
        items:
          $ref: '#/definitions/PSPPaymentTransactionDetailsDVO'
    title: PSPPaymentDetailsRepresentation
  PSPPaymentTransactionDetailsDVO:
    type: object
    properties:
      amount:
        type: integer
        format: int32
        example: 100
        description: Amount should be specified in Øre. 100 Øre conversion 1.00 NOK
      paymentText:
        type: string
        example: 'Betaling ordreid:'
        description: Transaction Note sent by PSP
      timeStamp:
        type: string
        example: '2018-06-13T18:34:25-07:00'
        description: Timestamp in ISO-8601 representing when Vipps did the payment
      operation:
        type: string
        example: REFUNDED
        description: Transaction Status
      operationSuccess:
        type: boolean
        example: false
        description: Success or failure for the given operation
    title: PSPPaymentTransactionDetailsDVO
  PSPV2PaymentStatusDTO:
    type: object
    properties:
      transactions:
        type: array
        items:
          $ref: '#/definitions/PSPV2TransactionInfo'
    title: PSPV2PaymentStatusDTO
  PSPV2TransactionInfo:
    type: object
    properties:
      pspTransactionId:
        type: string
        example: 7686f7788898767977
        description: PSP ID as defined in agreement with Netaxept TSP. PSP should have agreement with Netaxept to get the public key to encrypt the card data from NetAxept TSP via Vipps
      status:
        type: string
        example: CAPTURED
        description: PSP Transaction Status to be updated in Vipps
      amount:
        type: integer
        format: int32
        example: 100
        description: Amount should be specified in Øre. 100 Øre conversion 1.00 NOK
      currency:
        type: string
        example: NOK
        description: ISO 4217 defined currency code. Currently Vipps only supports NOK
      paymentText:
        type: string
        example: 'Betaling ordreid: 893746'
    title: PSPV2TransactionInfo
  PaymentInfoPSPV2:
    type: object
    properties:
      pspTransactionId:
        type: string
        example: 7686f7788898767977
        description: Used as a globally unique transaction reference for the PSP systems
      status:
        type: string
        example: RESERVE|CAPTURE|REJECT
        description: Status of the transaction
        enum:
          - OK
          - FAIL
    title: PaymentInfoPSPV2
  ResponseInfo:
    type: object
    properties:
      responseCode:
        type: string
      responseMessage:
        type: string
    title: ResponseInfo
  TransactionSummary:
    type: object
    properties:
      capturedAmount:
        type: integer
        format: int32
        example: 0
        description: Total amount captured
      remainingAmountToCapture:
        type: integer
        format: int32
        example: 0
        description: Total remaining amount to capture
      refundedAmount:
        type: integer
        format: int32
        example: 1200
        description: Total refunded amount of the order
      remainingAmountToRefund:
        type: integer
        format: int32
        example: 0
        description: Total remaining amount to refund
    title: TransactionSummary
